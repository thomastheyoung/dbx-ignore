name: Release Builds

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: dbx-ignore
            asset_name: dbx-ignore-linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: dbx-ignore.exe
            asset_name: dbx-ignore-windows-x64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: dbx-ignore
            asset_name: dbx-ignore-macos-intel
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: dbx-ignore
            asset_name: dbx-ignore-macos-arm64

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: target/${{ matrix.target }}/release/${{ matrix.binary_name }}

  create-universal-macos:
    name: Create Universal macOS Binary
    runs-on: macos-latest
    needs: build
    steps:
    - name: Download macOS Intel binary
      uses: actions/download-artifact@v4
      with:
        name: dbx-ignore-macos-intel
        path: ./intel

    - name: Download macOS ARM64 binary
      uses: actions/download-artifact@v4
      with:
        name: dbx-ignore-macos-arm64
        path: ./arm64

    - name: Create universal binary
      run: |
        mkdir -p universal
        lipo -create intel/dbx-ignore arm64/dbx-ignore -output universal/dbx-ignore-macos-universal
        chmod +x universal/dbx-ignore-macos-universal

    - name: Upload universal binary
      uses: actions/upload-artifact@v4
      with:
        name: dbx-ignore-macos-universal
        path: universal/dbx-ignore-macos-universal

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, create-universal-macos]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dbx-ignore-linux-x64/dbx-ignore
          dbx-ignore-windows-x64.exe/dbx-ignore.exe
          dbx-ignore-macos-universal/dbx-ignore-macos-universal
        body: |
          ## Platform Downloads
          
          - **macOS**: `dbx-ignore-macos-universal` (Universal Binary - Intel & Apple Silicon)
          - **Linux**: `dbx-ignore` (x86_64)
          - **Windows**: `dbx-ignore.exe` (x86_64)
          
          ## Installation
          
          1. Download the appropriate binary for your platform
          2. Make it executable: `chmod +x dbx-ignore-macos-universal`
          3. Move to PATH: `mv dbx-ignore-macos-universal /usr/local/bin/dbx-ignore`
        draft: false
        prerelease: false